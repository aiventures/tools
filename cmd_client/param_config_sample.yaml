# sample param_config rename to param_config.yaml and set the
# configpath.py pointing to file location of this file
# sample block for executables
# the parentheses my help to omit invalid optional command paramas
# (for example dropping opening at line commands when no line is submitted)
# you may need to adjust the sample to real files / paths on your computer
# check out all locations with the marker <PATH_TO>
# It is recommended to start with filling file paths and file locations and 
# continue from there 
pattern:
  notepadpp:
    pattern: "{[notepadpp]} {[file]} {-n[line]} {[extra]}"
    param:
      notepadpp:
        type: executable # use to check
        help: "Path to notepad++.exe"
      file:
        type: file
        help: "File to be opened"
      line:
        type: param
        help: "File to be opened at line number"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Opens Notepad++: [notepadpp] -n[line] [extra]"
  vscode:
    pattern: '{[vscode]} --goto "{[file]}{:[line]}" {[path]} {[extra]}'
    param:
      vscode:
        type: executable # use to check
        help: "Path to code.exe"
      file:
        type: file
        help: "File to be opened"
      line:
        type: param
        help: "File to be opened at line number"
      path:
        type: path
        help: "Path to be opened (in navigation window)"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Opens VSCODE: [vscode] [file] at [line] in path [path] with [extra]"
  vscode_diff:
    pattern: "{[vscode]} --diff {[oldfile]} {[newfile]} {[path]} {[extra]}"
    param:
      vscode:
        type: executable # use to check
        help: "Executable Path"
      oldfile:
        type: file # can be used to validate
        help: "Original File Version"
      newfile:
        type: file # can be used to validate
        help: "Changed File Version"
      path:
        type: path
        help: "Path to be opened (in navigation window)"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Performs diff in Visual Codes: [vscode] [oldfile] [newfile]"
  vscode_merge:
    pattern: "{[vscode]} --merge {[leftfile]} {[rightfile]} {[basefile]} {[targetfile]} {[path]} {[extra]}"
    param:
      vscode:
        type: executable # use to check
        help: "Executable Path"
      leftfile:
        type: file # can be used to validate
        help: "Changed File"
      rightfile:
        type: file # can be used to validate
        help: "Changed File (Different)"
      basefile:
        type: file # can be used to validate
        help: "Original File (Different)"
      targetfile:
        type: file # can be used to validate
        help: "Targedt File with applied changes"
      path:
        type: path
        help: "Path to be opened (in navigation window)"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Performs three way merge Visual Codes: [vscode] [leftfile] [rightfile] [basefile] [targetfile]"
  totalcmd:
    pattern: "{[totalcmd]} {/L=[left]} {/R=[right]}"
    param:
      totalcmd:
        type: executable # use to check
        help: "Path to TOTALCMD64.EXE"
      left:
        type: path
        help: "Path to be opened on left side"
      right:
        type: path
        help: "Path to be opened on right side"
    help: "Opens Total Commander with left and right folder [totalcmd] [left] [right]"
  py_bat:
    pattern: '{[py_bat]} {[module]} {[extra]} {[params]}'
    param:
      py_bat:
        type: executable # use to check
        help: "Path to Command Line Script"
      module:
        type: file # can be used to resolve file
        help: "python module to run"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
      params:
        type: param # can be used to validate
        help: "Module Parameters"
    help: "Launch Command Line pass over to python program [py_bat] [py_module] [py_params] \n(options prefix - needs to be written as _ )"
  plantuml:
    pattern: "java -jar {[plantuml]} -DPLANTUML_LIMIT_SIZE=8192 -stdrpt:1 -progress {-o [p_out]} {[extra]} {[file]} "
    param:
      plantuml:
        type: executable # use to check
        help: "Link to PLantUML JAR"
      p_out:
        type: path
        help: "Output folder"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
      file:
        type: file
        help: "PlantUML File to be opened"
    help: "Opens PlantUML: [plantuml] [extra] [file]"
  os_command:
    pattern: "{[os_command]} {[file]} {[path]} {[extra]}"
    param:
      os_command:
        type: param
        help: "executable"
      file:
        type: file
        help: "file parameter"
      path:
        type: path
        help: "path parameter"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Generic Run Command: [command] [file] [path] [extra]"
  sample_params:
    pattern: "{[vscode]} --diff {[oldfile]} {[newfile]} {[extra]}"
    param:
      vscode:
        type: executable # use to check
        help: "Executable Path"
      a_file:
        type: file # can be used to validate
        reference: absolute_file_path
      just_param:
        type: param # just a param without validation
      a_ref_path:
        type: path # can be used to validate
        path: environment_win
        reference: howto
      a_file_path:
        type: path # can be used to validate
        file:
        path: environment_win
        reference: howto
      newfile:
        type: file
        path: path
        reference: folder_in_environment # get the resolved ...
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Performs diff in Visual Codes: [vscode] [oldfile] [newfile]"
# plain definition of executable and where to find it
executable:
  default_editor:
    file: notepadpp
    help: "Default Editor (file points to one executable)"
  notepadpp:
    file: "notepad++.exe"
    path: "C:/<PATH_TO>/Notepad++"
    help: "Path to Notepad++"
  vscode:
    file: "Code.exe"
    path: "C:/<PATH_TO>/VSCode"
    help: "Path to VS Code"
  totalcmd:
    file: "TOTALCMD64.EXE"
    path: "C:/<PATH_TO>/totalcmd"
    help: "Path to Total Commander executable"
  cygpath:
    file: cygpath.exe
    path: p_git_tools
    help: "cygpath- tool to reolve path variables"
  py_bat:
    file: py.bat
    path: p_bat
    help: "Command line wrapper for starting python programs"   
  py_cmd_client:
    file: runner.py
    path: p_cmd_client
    help: "Command Line Client"
  py_code_inspector:
    file: cmd_code_inspector.py
    path: p_py_code_inspector
    help: "Python Command Line Tools - Code Inspector (generate UML)"
  plantuml:
    file: "plantuml.jar"
    path: "C:/<PATH_TO>/PlantUML"
    help: "Path to PlantUML"
# sample block for folder paths (reusable)
path:
  # example for reference to be looked in environment_win section
  p_desktop:
    path: "C:/Users/<USER>/Desktop"
    help: "Path to Desktop"
  p_umo:
    path: "C:/<PATH_TO>/INBOX"
    help: "Path to Inbox / Unsorted Items"
  p_bat:
    path: "C:/<PATH_TO>/tools/bat"
    help: "Path to Windows Command Line Scripts"
  p_cmd_client:
    path: "C:/<PATH_TO>/tools/cmd_client"
    help: "Path to cmd_client"
  p_todo:
    path: "C:/<PATH_TO>/todo_txt"
    help: "Path to TODO.TXT files"
  p_venv:
    path: "C:/<PATH_TO>/VENV"
    help: "Path to venvs"
  p_venv_default:
    path: "C:/<PATH_TO>/MYENV/Scripts"
    help: "Path to default venv"
  p_py_tools:
    path: "C:/<PATH_TO>/tools"
    help: "Python Command Line Tools Path"
  p_py_code_inspector:
    path: "C:/<PATH_TO>/tools/code_inspector"
    help: "Python Command Line Tools - Code Inspector (generate UML)"
  p_git_tools:
    path: "C:/<PATH_TO>/CMDER/vendor/git-for-windows/usr/bin"
    help: "Command Line Tools that come with Git (or from CMDER)"
  p_sample:
    path: "C:/<PATH_TO>/tools/sample"
    help: "Sample Files for experiments"
  cwd:
    path: "."
    help: "Current Working Directory"
  cc_home:
    path: "C:/<PATH_TO>/tools/cmd_client"
    help: "Command Center HOME Directory"
  folder_in_environment:
    path: environment_win # this points to environment_win
    reference: howto      # this points to howto config
    help: "xdrf"
  work_folder:
    path: "path>work_folder"
    help: "xdrf"
  favorites_folder:
    path: "C:/xyz"
    help: "xdrf"
  wrong_folder:
    help: "xdrf"
# sample block for document paths
file:
  file_config_report:
    file: "config.md"
    path: p_cmd_client
    help: "Configuration Report Export Location"
  file_win_env_bat:
    file: "env.bat"
    path: p_bat
    help: "Windows Command Line Environment Setup (will be generated using --export_env option)"
  file_environment_script:
    file: "set_env.bat"
    path: p_bat
    help: "WIIN Environment Setup Script"
  file_todo:
    file: "todo.txt"
    path: p_todo
    help: "TODO.TXT File"
  f_test:
    file: "test.txt"
    path: p_sample
    help: "Sample Text File"
  f_test_new:
    file: "test_new.txt"
    path: p_sample
    help: "Sample Text File (changes to test.txt)"
  f_test_different:
    file: "test_different.txt"
    path: p_sample
    help: "Sample Text File (different changes to test.txt)"
  f_test_merged:
    file: "test_merged.txt"
    path: p_sample
    help: "Sample Text File (merged changes from file test... comparisons)"
  f_merge_target:
    file: "merged_file.txt"
    path: cwd
    help: "Default file for merges"
  f_plantuml:
    file: "uml_class.plantuml"
    path: p_sample
    help: "Sample plantUML File"
  cc_config_file:
    file: "param_config.yaml"
    path: cc_home
    help: "CONFIG File for the Command Center"
  cc_report_file:
    file: "cc_report.md"
    path: cwd
    help: "File to be created for the Command Center"
  py_argparse_test:
    file: "argparse_test.py"
    path: p_py_tools
    help: "Argparse test file"
  absolute_file_path:
    file: "C:/<PATH_TO>/PlantUML/test.png"
    help: "sample for an absolute file"
  file_name_and_path:
    file: "test.png"
    path: "C:/<PATH_TO>/PlantUML"
    help: "sample for an absolute file"
  file_name_and_ext_path:
    file: "test.png"
    path: environment_win
    reference: valid_path # use reference to point to ref field
    help: "sample for an absolute fiöe"
  file_name_ext_path_only:
    file: environment_win
    path: environment_win
    reference: valid_file
    help: "sample for an absolute fiöe"
  xyz: # testing resolve_params
    file: "C:/<PATH_TO>/tools/cmd_client/param_config.yaml"
    help: "sample for a referenced file"
# sample block for scripts
script_win:
  bat1:
    file: "xyz"
    path: "xyz path"
    help: "short help text goes here"
# sample block for scripts bash
script_bash:
  bat1:
    file: "xyz"
    help: "short help text goes here"
# sample block for environment variables for win cmd
environment_win:
  folder_in_environment: # referenced in path
    value: "xyz"
    path: "C:/<PATH_TO>"
    help: "description"
  vs:
    value: VSCODE
    executable: vscode
    export: executable  # use export which attribute is to be exported as script
    help: "VSCODE Executable (used for export to environment variables)"
  tc:
    value: TOTAL_COMMANDER
    executable: totalcmd
    export: executable  # use export which attribute is to be exported as script
    help: "TOTAL_COMMANDER Executable (used for export to environment variables)"
  cygpath:
    value: CYGPATH
    executable: cygpath
    export: executable  # use export which attribute is to be exported as script
    help: "CYGPATH Executable (resolve Path)"
  plantuml:
    value: PLANTUML
    executable: plantuml
    export: executable  # use export which attribute is to be exported as script
    help: "PLANTUML JAR (resolve Path)"
  py_cmd_client:
    value: CMD_CLIENT
    executable: py_cmd_client
    export: executable  # use export which attribute is to be exported as script
    help: "Command Line Client"
  py_code_inspector:
    value: PY_CODE_INSPECTOR
    executable: py_code_inspector
    export: executable  # use export which attribute is to be exported as script
    help: "Python Command Line Tools - Code Inspector (generate UML)"
  p_venv_default:
    value: P_VENV_DEFAULT
    path: p_venv_default
    export: path  # use export which attribute is to be exported as script
    help: "Path to default Python VENV"
  p_venv:
    value: P_VENV
    path: p_venv
    export: path  # use export which attribute is to be exported as script
    help: "Path to Python VENV Folder"
  p_py_tools:
    value: P_PY_TOOLS
    path: p_py_tools
    export: path  # use export which attribute is to be exported as script
    help: "Path to Python Tools (Central Location)"
  p_desktop:
    path: p_desktop
    export: path
    help: "Path to Desktop"
  p_umo:
    path: p_umo
    export: path
    help: "Path to Inbox / Unsorted Items"
  howto:
    value: "xyz"
    path: "C:/"
    help: "description"
  # valid_path:
  #   value: "xyz"
  #   path: "C:/<PATH_TO>/PlantUML"
  #   help: "description"
  #   export: value # exporting a value
  valid_file:
    value: "xyz"
    file: "C:/<PATH_TO>/PlantUML/test.png"
    help: "description"
  howto2:
    value: "xyz"
    file: "xyz"
    path: "optional"
    help: "description"
# sample block for environment variables for win cmd
environment_bash:
  howto:
    value: "xyz"
    path: "optional"
    help: "description"
  howto2:
    value: "xyz"
    file: "xyz"
    path: "optional"
    help: "description"
# sample block for command line shortcuts:
# refers to elements in
# scripts, executables, documents section above
# @add_shortcut1
shortcut:
  cc_report:
    file: cc_report_file # these are parts evaluated in handling routine
    help: "ACTION: Creates the Configuration Report (Markdown Format)"
    action: create_report # actions defined in constants.py
  export_env:
    # file: cc_report_file
    path: cwd
    help: "ACTION: Exports Marked Elements as Batch Env Script"
    action: export_env # actions defined in constants.py
  cygwin:
    file: cygwin.exe
    path: sdsd
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  bat1:
    file: bat1
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  my_doc:
    file: howto
    help: "this is my knowledge collection"

# SAMPLE BLOCK for INPUT PARAMS USED FOR COMMAND LINE
cmd_param:
  # command line options for notepad++
  cmdparam_notepadpp:
    help: "Notepad++ Command Line Input"
    file:
      param_short: f
      param: file
      default: null
      help: "File to be opened"
      metavar: "[file]"
    line:
      param_short: l
      param: line
      default: null
      help: "Open File at submitted Line"
      metavar: "[line]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
    todo:
      param_short: ot
      param: todo
      dest: todo
      action: "store_true"
      help: "Opens todo.txt file"
    todo3:
      param_short: ot3
      param: todo3
      dest: todo3
      action: "store_true"
      help: "Opens todo2.txt file"
  cmdparam_vscode:
    help: "VSCODE Command Line Input"
    file:
      param_short: f
      param: file
      default: null
      help: "File to be opened"
      metavar: "[file]"
    line:
      param_short: l
      param: line
      default: null
      help: "Open File at submitted Line"
      metavar: "[line]"
    path:
      param_short: pv
      param: path
      default: cwd
      help: "Path to be opened"
      metavar: "[path]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
  cmdparam_vscode_diff:
    help: "VSCODE DiffTool"
    oldfile:
      param_short: of
      param: oldfile
      default: null
      help: "Original / Base file"
      metavar: "[oldfile]"
    newfile:
      param_short: nf
      param: newfile
      default: null
      help: "Changed file"
      metavar: "[newfile]"
    path:
      param_short: pv
      param: path
      default: cwd
      help: "Path to be opened"
      metavar: "[path]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
  cmdparam_vscode_merge:
    help: "VSCODE MergeTool"
    leftfile:
      param_short: lf
      param: leftfile
      default: null
      help: "Changed file"
      metavar: "[leftfile]"
    rightfile:
      param_short: rf
      param: rightfile
      default: null
      help: "Changed file (different)"
      metavar: "[rightfile]"
    basefile:
      param_short: bf
      param: basefile
      default: null
      help: "Original/Base file"
      metavar: "[basefile]"
    targetfile:
      param_short: tf
      param: targetfile
      default: f_merge_target
      help: "Target file"
      metavar: "[targetfile]"
    path:
      param_short: pv
      param: path
      default: cwd
      help: "Path to be opened"
      metavar: "[path]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
  cmdparam_totalcmd:
    help: "Total Commander Command Line Input"
    left:
      param_short: l
      param: left
      default: cwd
      help: "Path shown on left"
      metavar: "[left path]"
    right:
      param_short: r
      param: right
      default: p_umo
      help: "Path shown on right"
      metavar: "[right path]"
  cmdparam_py_bat:
    help: "Launch Python Programs from command line script"
    module:
      param_short: m
      param: module
      default: null
      help: "Module to be launched (full path, in quotes)"
      metavar: "[py module]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
    params:
      param_short: pp
      param: params
      default: null
      help: "Params to be passed to python program (in quotes,use underscores as param flags)"
      metavar: "[py params (use underscore)]"
  cmdparam_plantuml:
    help: "Launch PLantUML"
    p_out:
      param_short: p
      param: p_out
      default: cwd
      help: "plantuml target path for plantuml files (default: current path)"
      metavar: "[p_out]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra plantuml params..]"
    file:
      param_short: f
      param: file
      default: null
      help: "plantuml File to be opened"
      metavar: "[file]"
  cmdparam_os_command:
    help: "Open command"
    os_command:
      param_short: cm
      param: os_command
      default: null
      help: "os command"
      metavar: "[os_command]"
    file:
      param_short: f
      param: file
      default: null
      help: "file"
      metavar: "[file]"
    path:
      param_short: p
      param: path
      default: null
      help: "path"
      metavar: "[path]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params in quotes..]"
  # default params to be used frequently
  cmdparam_default:
    help: "often used default parameters"
    file:
      param_short: f
      param: file
      default: null
      help: "Input File"
      metavar: "[file]"
    file_out:
      param_short: fo
      param: file_out
      default: null
      help: "Output File"
      metavar: "[file_out]"
    csv_separator:
      param_short: csep
      param: csv_sep
      default: ";"
      help: "CSV separator, default is ';'"
      metavar: "[;]"
    decimal_separator:
      param_short: dsep
      param: dec_sep
      default: ","
      help: "decimal spearator, default is ','"
      metavar: "[,]"
    # loglevel:
    #   param_short: ll
    #   param: loglevel
    #   default: info
    #   choices: ["debug","info","warning","error"]
    #   help: "Set loglevel (debug,info,warning,error)"
    #   metavar: "[loglevel]"
    add_timestamp:
      param_short: ts
      param: add_timestamp
      dest: add_timestamp
      action: "store_true"
      help: "Help Comment True"
  # main params template
  cmd_client_main:
    help: "Main parameters for the cmd_client"
    create_report:
      param_short: crep
      param: create_report
      dest: create_report
      action: "store_true"
      help: "Create Configuration Report for CMD Client"
    export_env:
      param_short: cenv
      param: export_env
      dest: export_env
      action: "store_true"
      help: "Create Environment Env Bat For Windows Command Line"
    cc_report:
      param_short: ccr2
      param: cc_report
      dest: cc_report
      action: "store_true"
      help: "Create Command Center Configuration Report"
    xyz2:
      param_short: eex
      param: xyz2
      dest: xyz2
      action: "store_true"
      help: "Export marked environment variables as Batch Script"
    # param_short:
    #   param_short: pas
    #   param: param_short
    #   default: null
    #   help: "Help Comment"
    #   metavar: "[param_short]"
    action_param:
      param_short: pac
      param: action_param
      dest: action_param
      action: "store_true"
      help: "Testing Action Resolver"


  # parameters to be used as copy paste templates
  cmdparam_template:
    help: "description of the cmdparams template"
    # sample block for param input
    sample_param:
      param_short: ps
      param: param_short
      default: null
      help: "Help Comment"
      metavar: "[param_short]"
    # sample block for true boolean
    sample_bool_true:
      param_short: sbt
      param: sbtrue
      dest: sbtrue
      action: "store_true"
      help: "Help Comment True"
    # sample block for false boolean
    sample_bool_false:
      param_short: sbf
      param: sbfalse
      dest: sbfalse
      action: "store_false"
      help: "Help Comment False"

# subparser structures
cmd_subparser:
  # this is the subparser config name
  subparser_sample_config:
    # the keys correspond to the first subparam,
    # (which will be used as (sub)command)
    # values must match the cmdparams key
    # if there is a help in the params template it will be used
    subparse_cmd: cmdparam_template
  subparser_cmd_client:
    npp: cmdparam_notepadpp
    vs: cmdparam_vscode
    diff: cmdparam_vscode_diff
    merge: cmdparam_vscode_merge
    tc: cmdparam_totalcmd
    py: cmdparam_py_bat
    puml: cmdparam_plantuml
    run: cmdparam_os_command
# mapping command line items to configuration items
# the key should be the same
# if nothing is mapped by default a resolved value will be
# aadded as an additional field to the cmd configuration
# default case should be a mapping to a pattern
cmd_map:
  cmdparam_notepadpp:  # mapping cmdparam_notepadpp params to a pattern
    help: "Map Input Params to Notepad++"
    map:
      type: pattern                 # this is the rule for how to map
      cmd_param: cmdparam_notepadpp # maps the command line params ..
      pattern: notepadpp            # .. to a specific pattern
  cmdparam_vscode:  # mapping cmdparam_vscode params to a pattern
    help: "Map Input Params to VSCode"
    map:
      type: pattern
      cmd_param: cmdparam_vscode
      pattern: vscode
  cmdparam_vscode_diff:
    help: "Map Input Params to VSCode DIFF"
    map:
      type: pattern
      cmd_param: cmdparam_vscode_diff
      pattern: vscode_diff
  cmdparam_vscode_merge:
    help: "Map Input Params to VSCode MERGE"
    map:
      type: pattern
      cmd_param: cmdparam_vscode_merge
      pattern: vscode_merge
  cmdparam_totalcmd:  # mapping total commander params to a pattern
    help: "Map Input Params to Total Commander"
    map:
      type: pattern
      cmd_param: cmdparam_totalcmd
      pattern: totalcmd
  cmdparam_py_bat:  # mapping py cmd cli to pattern
    help: "Map Input Params to Python Command Line"
    map:
      type: pattern
      cmd_param: cmdparam_py_bat
      pattern: py_bat
  cmdparam_plantuml:  # mapping plantuml cmd cli to pattern
    help: "Map Input Params to plantUML"
    map:
      type: pattern
      cmd_param: cmdparam_plantuml
      pattern: plantuml
  cmdparam_os_command:  # mapping plantuml cmd cli to pattern
    help: "Generic Map for Commands"
    map:
      type: pattern
      cmd_param: cmdparam_os_command
      pattern: os_command
  cmd_client_main:  # mapping main client config options as action mapping
    help: "Map Main Parameters to Commands"
    map:
      type: multiple                # this indicates multiple mappings
      cc_report:                    # map cc_report parameter in cmd_params to
        action: create_report       # action create report (without any parameters )
      sample_action:
        action: export_env          # actions as defined by actions
        param:                      # any additional params that may be added for the comman
          # the parameter myparam will appear as key in input dict of action_resolver exit methods
          myparam: { type: file, param: cc_report, key: file } # use value from file > cc_report_file > file
      action_param:   # testing argparse action_param (is defined in argparse parameters)
        action: action_param
        param:
          params_test_action: { type: shortcut, param: cc_report }
          params_test_action2: { type: shortcut, param: cc_report }
      create_report:   # exit for predefined config_report / working
        action: create_report
        param:
          config_report: { type: file, param: file_config_report, key: file }
      export_env: # exit for predefined env script / working
        action: export_env
        param:
          win_env_bat: { type: file, param: file_win_env_bat, key: file }
      #file_config_report:
      # file_environment_script:
      # param_short (as defined in cmd_param) is left unmapped > only parameter will be passed

# maps (boolean) shortcut argparse commands to predefined values
# see the example for the parameter
# @add_shortcut cmd_imput_map > part > param_sh > map (map a single input parameter to a config part)
cmd_input_map:
  default: # default values
    help: "Maps the default parser arguments (`cmdparam_default`) to configuration"
    dummy:
      help: "Just a dummy map"
      type: file # mapping against config type file
      map:
        - source: { param: cc_report_file, key: file } # map against field value in config
          param: hugo
        - source: { param: test_another_param, key: test }
          param: hugo2
  main: # main subparser (will be evaluated when parser subcommand is None)
    help: "Maps the main parser (`cmd_client_main`) to configuration"
    param_short:   # this is the cmd parameter we want to dereference
      type: file # this indicates that we map a config item to arg parse
      map:                        # NOTE we use list of config dicts
        - source: { param: cc_report_file, key: file }
          param: cc_report_file # this will be used incase param cc_report_file is used in argparser arguments
  npp: # subparser alias as defined in cmd_subparser
    help: "Maps the Notepad++ subparser (`cmdparam_notepadpp`) to configuration"
    todo_home: # use parameter
      type: path
      map:
        - source: {param: cc_home, key: path }
          param: path
    todo3: # we need to define an action argparse todo3 to make it work ...
      pattern: notepadpp # this indicates that pattern is used
      type: file
      map:  # get file attribute from config: file > todo_file > file key (resolved)
        - source: {param: cc_report_file, key: file }  # source field file > cc_report_file > file
          param: file # ... maps to parameter file in argparse arguments / pattern
configuration: # general configuration settings
  loglevel: debug # debug, info, warning, error
  open_files: true # open files after creation
  default_editor: notepadpp # default editor to open files must be one of the executable entries
  default_venv: p_venv_default # points to path > venv_default > (path to venv)
  py_bat: py_bat # python command line wrapper: executable > (link to command line script)


# Check Out the HowTO Images ....
# RECIPE TO ADD ACTION (look for @add_shortcut in this file)
# config file
# - add param / action in cmd_param (argparse configuration)
# - cmd_map > [cmd_param_map] > <param> > map > type: multiple > Add Parameter Dict to Config Mapping (as shown above)
# - action_resolve.py > ActionResolver (Callback Class)
# > add action resolve_action (call your productive code there)
# >
# - <type> > <key> > action: add action
# config_resolver.py > _resolve_action > add action constant method > supply any additional parameters that might be needed to resolve the action
# config.py > run_actions > add action  / method (this is where the spevific actions are handled)
# ( runner.py > run_cmd > actions are returned )
# maybe pull out logic from config_resolver into config






