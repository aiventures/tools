# sample param_config rename to param_config.yaml and set the 
# configpath.py pointing to file location of this file 
# sample block for executables
pattern:
  vscode_diff:
    pattern: "vscode --diff oldfile newfile"
    param: 
      vscode: executable
      oldfile: files
      newfile: files
    help: "Performs diff in Visual CodeS"
executable:
  vscode:
    executable: "xyz"
    path: ""
    help: "short help text goes here"
  cygwin:
    executable: "xyz"
    help: "short help text goes here"
# sample block for folder paths (reusable)
path:
  work_folder:
    path:"xyt"
    help:"xdrf"    
# sample block for document paths
file:
  howto:
    file: "xyz"
    path: "optional, relative to paths or absolute"
    help: "description"    
# sample block for scripts
script:
  bat1:
    file: "xyz"
    help: "short help text goes here"
# sample block for scripts bash
script_bash:
  bat1:
    file: "xyz"
    path: work_folder
    help: "short help text goes here"    
# sample block for environment variables for win cmd
environment_win:
  howto:
    value: "xyz"
    path: "optional"
    help: "description"
# sample block for command line shortcuts:
# refers to elements in
# scripts, executables, documents section above
shortcut:
  cygwin:
    executable: cygwin.exe
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  bat1:
    executable: bat1
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  my_doc:
    file: howto
    help: "this is my knowledge collection"
  vscode_diff:
    pattern: vscode_diff
    help: "Display Diff using VS Code"

# SAMPLE BLOCK for INPUT PARAMS USED FOR COMMAND LINE
cmd_param:
  # default params to be used frequently
  cmdparam_default:
    help: "often used default parameters"
    file:
      param_short: f
      param: file
      default: null
      help: "Input File"
      metavar: "[file]"  
    file_out:
      param_short: fo
      param: file_out
      default: null
      help: "Output File"
      metavar: "[file_out]"        
    csv_separator:
      param_short: csep
      param: csv_sep
      default: ";"
      help: "CSV separator, default is ';'"
      metavar: "[;]"
    decimal_separator:
      param_short: dsep
      param: dec_sep
      default: ","
      help: "decimal spearator, default is ','"
      metavar: "[,]"
    loglevel:
      param_short: ll
      param: loglevel
      default: info
      choices: ["debug","info","warning","error"]
      help: "Set loglevel (debug,info,warning,error)"
      metavar: "[loglevel]"      
    add_timestamp:
      param_short: ts
      param: add_timestamp
      dest: add_timestamp
      action: "store_true"
      help: "Help Comment True"      

  # parameters to be used as copy paste templates
  cmdparam_template:
    help: "description of the cmdparams template"
    # sample block for param input
    sample_param:
      param_short: ps
      param: param_short
      default: null
      help: "Help Comment"
      metavar: "[param_short]"
    # sample block for true boolean
    sample_bool_true:
      param_short: sbt
      param: sbtrue
      dest: sbtrue
      action: "store_true"
      help: "Help Comment True"
    # sample block for false boolean
    sample_bool_false:
      param_short: sbf
      param: sbfalse
      dest: sbfalse
      action: "store_false"
      help: "Help Comment False"
# subparser structures
cmd_subparser:
  # this is the subparser config name 
  subparser_sample_config:      
    # the keys correspond to the first subparam, 
    # (which will be used as (sub)command)
    # values must match the cmdparams key
    # if there is a help in the params template it will be used
    subparse_cmd: cmdparam_template





