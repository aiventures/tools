# sample param_config rename to param_config.yaml and set the
# configpath.py pointing to file location of this file
# sample block for executables
# the parentheses my help to omit invalid optional command paramas
# (for example dropping opening at line commands when no line is submitted)
# you may need to adjust the sample to real files / paths on your computer
# check out all locations with the marker word #REPLACE#
pattern:
  notepadpp:
    pattern: "{[notepadpp]} {[file]} {-n[line]} {[extra]}"
    param:
      notepadpp:
        type: executable # use to check
        help: "Path to notepad++.exe"
      file:
        type: file
        help: "File to be opened"
      line:
        type: param
        help: "File to be opened at line number"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Opens Notepad++: [notepadpp] -n[line] [extra]"
  vscode:
    pattern: '{[vscode]} --goto "{[file]}{:[line]}" {[extra]}'
    param:
      vscode:
        type: executable # use to check
        help: "Path to code.exe"
      file:
        type: file
        help: "File to be opened"
      line:
        type: param
        help: "File to be opened at line number"
      extra:
        type: param
        help: "Additional params (in quotes) to be appended to command"
    help: "Opens VSCODE: [vscode] [file] at [line] with [extra]"
  vscode_diff:
    pattern: "{[vscode]} --diff {[oldfile]} {[newfile]}"
    param:
      vscode:
        type: executable # use to check
        help: "Executable Path"
      a_file:
        type: file # can be used to validate
        reference: absolute_file_path
      just_param:
        type: param # just a param without validation
      a_ref_path:
        type: path # can be used to validate
        path: environment_win
        reference: howto
      a_file_path:
        type: path # can be used to validate
        file:
        path: environment_win
        reference: howto
      newfile:
        type: file
        path: path
        reference: folder_in_environment # get the resolved ...
    help: "Performs diff in Visual Codes: [vscode] [oldfile] [newfile]"
# plain definition of executable and where to find it
executable:
  notepadpp:
    file: "notepad++.exe"
    path: "C:/10_Tools/Notepad++"
    help: "Path to Notepad++"
  vscode:
    file: "Code.exe"
    path: "C:/<PATH_TO>VSCode"
    help: "Path to VS Code"
  cygwin:
    file: "xyz"
    help: "short help text goes here"
# sample block for folder paths (reusable)
path:
  # example for reference to be looked in environment_win section
  cwd:
    path: "."
    help: "Current Working Directory"
  cc_home:
    path: "C:/<PATH_TO>W<PATH_TO>"
    help: "Command Center HOME Directory"
  folder_in_environment:
    path: environment_win # this points to environment_win
    reference: howto      # this points to howto config
    help: "xdrf"
  work_folder:
    path: "path>work_folder"
    help: "xdrf"
  favorites_folder:
    path: "C:/05_TRANSIENT"
    help: "xdrf"
  wrong_folder:
    help: "xdrf"
# sample block for document paths
file:
  todo_file:
    file: "todo.txt"
    path: "C:/<PATH_TO>/todo_txt"
    help: "TODO.TXT File"
  cc_config_file:
    file: "param_config.yaml"
    path: cc_home
    help: "CONFIG File for the Command Center"
  cc_report_file:
    file: "cc_report.md"
    path: cwd
    help: "File to be created for the Command Center"
  absolute_file_path:
    file: "C:/<PATH_TO>PlantUML/test.png"
    help: "sample for an absolute file"
  file_name_and_path:
    file: "test.png"
    path: "C:/<PATH_TO>PlantUML"
    help: "sample for an absolute fiöe"
  file_name_and_ext_path:
    file: "test.png"
    path: environment_win
    reference: valid_path # use reference to point to ref field
    help: "sample for an absolute fiöe"
  file_name_ext_path_only:
    file: environment_win
    path: environment_win
    reference: valid_file
    help: "sample for an absolute fiöe"
  xyz: # testing resolve_params
    file: "C:/<PATH_TO>W<PATH_TO>/param_config.yaml"
    help: "sample for a referenced file"

# sample block for scripts
script_win:
  bat1:
    file: "xyz"
    path: "xyz path"
    help: "short help text goes here"
# sample block for scripts bash
script_bash:
  bat1:
    file: "xyz"
    help: "short help text goes here"
# sample block for environment variables for win cmd
environment_win:
  folder_in_environment: # referenced in path
    value: "xyz"
    path: "C:/..."
    help: "description"
  howto:
    value: "xyz"
    path: "C:/"
    export: path # use export which attribute is to be exported as script
    help: "description"
  valid_path:
    value: "xyz"
    path: "C:/<PATH_TO>PlantUML"
    help: "description"
    export: value # exporting a value
  valid_file:
    value: "xyz"
    file: "C:/<PATH_TO>PlantUML/test.png"
    help: "description"
  howto2:
    value: "xyz"
    file: "xyz"
    path: "optional"
    help: "description"
# sample block for environment variables for win cmd
environment_bash:
  howto:
    value: "xyz"
    path: "optional"
    help: "description"
  howto2:
    value: "xyz"
    file: "xyz"
    path: "optional"
    help: "description"
# sample block for command line shortcuts:
# refers to elements in
# scripts, executables, documents section above
shortcut:
  cc_report:
    file: cc_report_file
    help: "ACTION: Creates the Configuration Report (Markdown Format)"
    action: create_report # actions defined in constants.py
  cygwin:
    file: cygwin.exe
    path: sdsd
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  bat1:
    file: bat1
    help: "Display Path: -d -a [<filename>]/-p <.|path>"
  my_doc:
    file: howto
    help: "this is my knowledge collection"

# SAMPLE BLOCK for INPUT PARAMS USED FOR COMMAND LINE
cmd_param:
  # command line options for notepad++
  cmdparam_notepadpp:
    help: "Notepad++ Command Line Input"
    file:
      param_short: f
      param: file
      default: null
      help: "File to be opened"
      metavar: "[file]"
    line:
      param_short: l
      param: line
      default: null
      help: "Open File at submitted Line"
      metavar: "[line]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
    todo:
      param_short: ot
      param: todo
      dest: todo
      action: "store_true"
      help: "Opens todo.txt file"

  cmdparam_vscode:
    help: "VSCODE Command Line Input"
    file:
      param_short: f
      param: file
      default: null
      help: "File to be opened"
      metavar: "[file]"
    line:
      param_short: l
      param: line
      default: null
      help: "Open File at submitted Line"
      metavar: "[line]"
    extra:
      param_short: x
      param: extra
      default: null
      help: "Extra parameters, will be appended to command"
      metavar: "[..extra params..]"
  # default params to be used frequently
  cmdparam_default:
    help: "often used default parameters"
    file:
      param_short: f
      param: file
      default: null
      help: "Input File"
      metavar: "[file]"
    file_out:
      param_short: fo
      param: file_out
      default: null
      help: "Output File"
      metavar: "[file_out]"
    csv_separator:
      param_short: csep
      param: csv_sep
      default: ";"
      help: "CSV separator, default is ';'"
      metavar: "[;]"
    decimal_separator:
      param_short: dsep
      param: dec_sep
      default: ","
      help: "decimal spearator, default is ','"
      metavar: "[,]"
    loglevel:
      param_short: ll
      param: loglevel
      default: info
      choices: ["debug","info","warning","error"]
      help: "Set loglevel (debug,info,warning,error)"
      metavar: "[loglevel]"
    add_timestamp:
      param_short: ts
      param: add_timestamp
      dest: add_timestamp
      action: "store_true"
      help: "Help Comment True"

  # main params template
  cmd_client_main:
    help: "Main parameters for the cmd_client"
    cc_report:
      param_short: ccr
      param: cc_report
      dest: cc_report
      action: "store_true"
      help: "Create Command Center Configuration Report"
    param_short:
      param_short: ps
      param: param_short
      default: null
      help: "Help Comment"
      metavar: "[param_short]"

  # parameters to be used as copy paste templates
  cmdparam_template:
    help: "description of the cmdparams template"
    # sample block for param input
    sample_param:
      param_short: ps
      param: param_short
      default: null
      help: "Help Comment"
      metavar: "[param_short]"
    # sample block for true boolean
    sample_bool_true:
      param_short: sbt
      param: sbtrue
      dest: sbtrue
      action: "store_true"
      help: "Help Comment True"
    # sample block for false boolean
    sample_bool_false:
      param_short: sbf
      param: sbfalse
      dest: sbfalse
      action: "store_false"
      help: "Help Comment False"
# subparser structures
cmd_subparser:
  # this is the subparser config name
  subparser_sample_config:
    # the keys correspond to the first subparam,
    # (which will be used as (sub)command)
    # values must match the cmdparams key
    # if there is a help in the params template it will be used
    subparse_cmd: cmdparam_template
  subparser_cmd_client:
    npp: cmdparam_notepadpp
    vs: cmdparam_vscode
# mapping command line items to configuration items
# the key should be the same
# if nothing is mapped by default a resolved value will be
# aadded as an additional field to the cmd configuration
# default case should be a mapping to a pattern
cmd_map:
  cmdparam_notepadpp:  # mapping cmdparam_notepadpp params to a pattern
    help: "Map Input Params to Notepad++"
    map:
      type: pattern                 # this is the rule for how to map
      cmd_param: cmdparam_notepadpp # maps the command line params ..
      pattern: notepadpp            # .. to a specific pattern
  cmdparam_vscode:  # mapping cmdparam_notepadpp params to a pattern
    help: "Map Input Params to VSCode"
    map:
      type: pattern
      cmd_param: cmdparam_vscode
      pattern: vscode
  cmd_client_main:  # mapping main client config options as action mapping
    help: "Map Main Parameters to Commands"
    map:
      type: action                  # this indicates it's of generic action
      cc_report:                    # input parameter (here we use cc_report flag)
        type: shortcut              # .. look in configuration.yaml ...
        key: cc_report              #  shortcut > cc_report
# maps (boolean) shortcut commands to predefined values
# see the example
cmd_input_map:
  default: # default values
    help: "Maps the default parser arguments (`cmdparam_default`) to configuration"
    dummy:
      help: "Just a dummy map"
      map:
        - source:
            type: file
            param: cc_report_file
            key: file
          param: hugo
        - source:
            type: file
            param: test_another_param
            key: test
          param: hugo2
  main: # main subparser (will be evaluated when parser subcommand is None)
    help: "Maps the main parser (`cmd_client_main`) to configuration"
    param_short:   # this is the cmd parameter we want to dereference
      map:                        # NOTE we use list of config dicts
        - source:                 # here we set file parameter in the params
            type: file            # use value from file > cc_report_file > file
            param: cc_report_file
            key: file
          param: hugo             # map to output param
  npp: # subparser alias as defined in cmd_subparser
    help: "Maps the Notepad++ subparser (`cmdparam_notepadpp`) to configuration"
    todo:
      map:
        - source:
            type: path
            param: cc_home
            key: path
          param: path
      help: "Testing the map"
